id,label,bug_url,bug_function,functions
36726,1,https://github.com/libav/libav/blob/8dd0a2c5cf40a8a49faae985adc11750b6429132/libavcodec/nellymoserenc.c/#L260,"static void get_exponent_dynamic(NellyMoserEncodeContext *s, float *cand, int *idx_table)
{
    int i, j, band, best_idx;
    float power_candidate, best_val;
    float  (*opt )[NELLY_BANDS] = s->opt ;
    uint8_t(*path)[NELLY_BANDS] = s->path;
    for (i = 0; i < NELLY_BANDS * OPT_SIZE; i++) {
        opt[0][i] = INFINITY;
    }
    for (i = 0; i < 64; i++) {
        opt[0][ff_nelly_init_table[i]] = distance(cand[0], ff_nelly_init_table[i], 0);
        path[0][ff_nelly_init_table[i]] = i;
    }
    for (band = 1; band < NELLY_BANDS; band++) {
        int q, c = 0;
        float tmp;
        int idx_min, idx_max, idx;
        power_candidate = cand[band];
        for (q = 1000; !c && q < OPT_SIZE; q <<= 2) {
            idx_min = FFMAX(0, cand[band] - q);
            idx_max = FFMIN(OPT_SIZE, cand[band - 1] + q);
            for (i = FFMAX(0, cand[band - 1] - q); i < FFMIN(OPT_SIZE, cand[band - 1] + q); i++) {
                if ( isinf(opt[band - 1][i]) )
                    continue;
                for (j = 0; j < 32; j++) {
                    idx = i + ff_nelly_delta_table[j];
                    if (idx > idx_max)
                        break;
                    if (idx >= idx_min) {
                        tmp = opt[band - 1][i] + distance(idx, power_candidate, band);
                        if (opt[band][idx] > tmp) {
                            opt[band][idx] = tmp;
                            path[band][idx] = j;
                            c = 1;
                        }
                    }
                }
            }
        }
        assert(c);
    }
    best_val = INFINITY;
    best_idx = -1;
    band = NELLY_BANDS - 1;
    for (i = 0; i < OPT_SIZE; i++) {
        if (best_val > opt[band][i]) {
            best_val = opt[band][i];
            best_idx = i;
        }
    }
    for (band = NELLY_BANDS - 1; band >= 0; band--) {
        idx_table[band] = path[band][best_idx];
        if (band) {
            best_idx -= ff_nelly_delta_table[path[band][best_idx]];
        }
    }
}","['static void get_exponent_dynamic(NellyMoserEncodeContext *s, float *cand, int *idx_table)\n{\n    int i, j, band, best_idx;\n    float power_candidate, best_val;\n    float  (*opt )[NELLY_BANDS] = s->opt ;\n    uint8_t(*path)[NELLY_BANDS] = s->path;\n    for (i = 0; i < NELLY_BANDS * OPT_SIZE; i++) {\n        opt[0][i] = INFINITY;\n    }\n    for (i = 0; i < 64; i++) {\n        opt[0][ff_nelly_init_table[i]] = distance(cand[0], ff_nelly_init_table[i], 0);\n        path[0][ff_nelly_init_table[i]] = i;\n    }\n    for (band = 1; band < NELLY_BANDS; band++) {\n        int q, c = 0;\n        float tmp;\n        int idx_min, idx_max, idx;\n        power_candidate = cand[band];\n        for (q = 1000; !c && q < OPT_SIZE; q <<= 2) {\n            idx_min = FFMAX(0, cand[band] - q);\n            idx_max = FFMIN(OPT_SIZE, cand[band - 1] + q);\n            for (i = FFMAX(0, cand[band - 1] - q); i < FFMIN(OPT_SIZE, cand[band - 1] + q); i++) {\n                if ( isinf(opt[band - 1][i]) )\n                    continue;\n                for (j = 0; j < 32; j++) {\n                    idx = i + ff_nelly_delta_table[j];\n                    if (idx > idx_max)\n                        break;\n                    if (idx >= idx_min) {\n                        tmp = opt[band - 1][i] + distance(idx, power_candidate, band);\n                        if (opt[band][idx] > tmp) {\n                            opt[band][idx] = tmp;\n                            path[band][idx] = j;\n                            c = 1;\n                        }\n                    }\n                }\n            }\n        }\n        assert(c);\n    }\n    best_val = INFINITY;\n    best_idx = -1;\n    band = NELLY_BANDS - 1;\n    for (i = 0; i < OPT_SIZE; i++) {\n        if (best_val > opt[band][i]) {\n            best_val = opt[band][i];\n            best_idx = i;\n        }\n    }\n    for (band = NELLY_BANDS - 1; band >= 0; band--) {\n        idx_table[band] = path[band][best_idx];\n        if (band) {\n            best_idx -= ff_nelly_delta_table[path[band][best_idx]];\n        }\n    }\n}']"
36735,1,https://github.com/apache/httpd/blob/f0153228f53ed8ea18930d3045e5436932a5b32c/modules/cache/mod_cache_socache.c/#L922,"static apr_status_t store_headers(cache_handle_t *h, request_rec *r,
        cache_info *info)
{
    cache_socache_dir_conf *dconf =
            ap_get_module_config(r->per_dir_config, &cache_socache_module);
    cache_socache_conf *conf = ap_get_module_config(r->server->module_config,
            &cache_socache_module);
    apr_size_t slider;
    apr_status_t rv;
    cache_object_t *obj = h->cache_obj;
    cache_socache_object_t *sobj = (cache_socache_object_t*) obj->vobj;
    cache_socache_info_t *socache_info;
    memcpy(&h->cache_obj->info, info, sizeof(cache_info));
    if (r->headers_out) {
        sobj->headers_out = ap_cache_cacheable_headers_out(r);
    }
    if (r->headers_in) {
        sobj->headers_in = ap_cache_cacheable_headers_in(r);
    }
    sobj->expire
            = obj->info.expire > r->request_time + dconf->maxtime ? r->request_time
                    + dconf->maxtime
                    : obj->info.expire + dconf->mintime;
    apr_pool_create(&sobj->pool, r->pool);
    sobj->buffer = apr_palloc(sobj->pool, dconf->max);
    sobj->buffer_len = dconf->max;
    socache_info = (cache_socache_info_t *) sobj->buffer;
    if (sobj->headers_out) {
        const char *vary;
        vary = apr_table_get(sobj->headers_out, ""Vary"");
        if (vary) {
            apr_array_header_t* varray;
            apr_uint32_t format = CACHE_SOCACHE_VARY_FORMAT_VERSION;
            memcpy(sobj->buffer, &format, sizeof(format));
            slider = sizeof(format);
            memcpy(sobj->buffer + slider, &obj->info.expire,
                    sizeof(obj->info.expire));
            slider += sizeof(obj->info.expire);
            varray = apr_array_make(r->pool, 6, sizeof(char*));
            tokens_to_array(r->pool, vary, varray);
            if (APR_SUCCESS != (rv = store_array(varray, sobj->buffer,
                    sobj->buffer_len, &slider))) {
                ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(02370)
                        ""buffer too small for Vary array, caching aborted: %s"",
                        obj->key);
                apr_pool_destroy(sobj->pool);
                sobj->pool = NULL;
                return rv;
            }
            if (socache_mutex) {
                apr_status_t status = apr_global_mutex_lock(socache_mutex);
                if (status != APR_SUCCESS) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(02371)
                            ""could not acquire lock, ignoring: %s"", obj->key);
                    apr_pool_destroy(sobj->pool);
                    sobj->pool = NULL;
                    return status;
                }
            }
            rv = conf->provider->socache_provider->store(
                    conf->provider->socache_instance, r->server,
                    (unsigned char *) obj->key, strlen(obj->key), sobj->expire,
                    (unsigned char *) sobj->buffer, (unsigned int) slider,
                    sobj->pool);
            if (socache_mutex) {
                apr_status_t status = apr_global_mutex_unlock(socache_mutex);
                if (status != APR_SUCCESS) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(02372)
                            ""could not release lock, ignoring: %s"", obj->key);
                }
            }
            if (rv != APR_SUCCESS) {
                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, rv, r, APLOGNO(02373)
                        ""Vary not written to cache, ignoring: %s"", obj->key);
                apr_pool_destroy(sobj->pool);
                sobj->pool = NULL;
                return rv;
            }
            obj->key = sobj->key = regen_key(r->pool, sobj->headers_in, varray,
                    sobj->name);
        }
    }
    socache_info->format = CACHE_SOCACHE_DISK_FORMAT_VERSION;
    socache_info->date = obj->info.date;
    socache_info->expire = obj->info.expire;
    socache_info->entity_version = sobj->socache_info.entity_version++;
    socache_info->request_time = obj->info.request_time;
    socache_info->response_time = obj->info.response_time;
    socache_info->status = obj->info.status;
    if (r->header_only && r->status != HTTP_NOT_MODIFIED) {
        socache_info->header_only = 1;
    }
    else {
        socache_info->header_only = sobj->socache_info.header_only;
    }
    socache_info->name_len = strlen(sobj->name);
    memcpy(&socache_info->control, &obj->info.control, sizeof(cache_control_t));
    slider = sizeof(cache_socache_info_t);
    if (slider + socache_info->name_len >= sobj->buffer_len) {
        ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(02374)
                ""cache buffer too small for name: %s"",
                sobj->name);
        apr_pool_destroy(sobj->pool);
        sobj->pool = NULL;
        return APR_EGENERAL;
    }
    memcpy(sobj->buffer + slider, sobj->name, socache_info->name_len);
    slider += socache_info->name_len;
    if (sobj->headers_out) {
        if (APR_SUCCESS != store_table(sobj->headers_out, sobj->buffer,
                sobj->buffer_len, &slider)) {
            ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(02375)
                    ""out-headers didn't fit in buffer: %s"", sobj->name);
            apr_pool_destroy(sobj->pool);
            sobj->pool = NULL;
            return APR_EGENERAL;
        }
    }
    if (sobj->headers_in) {
        if (APR_SUCCESS != store_table(sobj->headers_in, sobj->buffer,
                sobj->buffer_len, &slider)) {
            ap_log_rerror(APLOG_MARK, APLOG_WARNING, rv, r, APLOGNO(02376)
                    ""in-headers didn't fit in buffer %s"",
                    sobj->key);
            apr_pool_destroy(sobj->pool);
            sobj->pool = NULL;
            return APR_EGENERAL;
        }
    }
    sobj->body_offset = slider;
    return APR_SUCCESS;
}","['static apr_status_t store_headers(cache_handle_t *h, request_rec *r,\n        cache_info *info)\n{\n    cache_socache_dir_conf *dconf =\n            ap_get_module_config(r->per_dir_config, &cache_socache_module);\n    cache_socache_conf *conf = ap_get_module_config(r->server->module_config,\n            &cache_socache_module);\n    apr_size_t slider;\n    apr_status_t rv;\n    cache_object_t *obj = h->cache_obj;\n    cache_socache_object_t *sobj = (cache_socache_object_t*) obj->vobj;\n    cache_socache_info_t *socache_info;\n    memcpy(&h->cache_obj->info, info, sizeof(cache_info));\n    if (r->headers_out) {\n        sobj->headers_out = ap_cache_cacheable_headers_out(r);\n    }\n    if (r->headers_in) {\n        sobj->headers_in = ap_cache_cacheable_headers_in(r);\n    }\n    sobj->expire\n            = obj->info.expire > r->request_time + dconf->maxtime ? r->request_time\n                    + dconf->maxtime\n                    : obj->info.expire + dconf->mintime;\n    apr_pool_create(&sobj->pool, r->pool);\n    sobj->buffer = apr_palloc(sobj->pool, dconf->max);\n    sobj->buffer_len = dconf->max;\n    socache_info = (cache_socache_info_t *) sobj->buffer;\n    if (sobj->headers_out) {\n        const char *vary;\n        vary = apr_table_get(sobj->headers_out, ""Vary"");\n        if (vary) {\n            apr_array_header_t* varray;\n            apr_uint32_t format = CACHE_SOCACHE_VARY_FORMAT_VERSION;\n            memcpy(sobj->buffer, &format, sizeof(format));\n            slider = sizeof(format);\n            memcpy(sobj->buffer + slider, &obj->info.expire,\n                    sizeof(obj->info.expire));\n            slider += sizeof(obj->info.expire);\n            varray = apr_array_make(r->pool, 6, sizeof(char*));\n            tokens_to_array(r->pool, vary, varray);\n            if (APR_SUCCESS != (rv = store_array(varray, sobj->buffer,\n                    sobj->buffer_len, &slider))) {\n                ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(02370)\n                        ""buffer too small for Vary array, caching aborted: %s"",\n                        obj->key);\n                apr_pool_destroy(sobj->pool);\n                sobj->pool = NULL;\n                return rv;\n            }\n            if (socache_mutex) {\n                apr_status_t status = apr_global_mutex_lock(socache_mutex);\n                if (status != APR_SUCCESS) {\n                    ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(02371)\n                            ""could not acquire lock, ignoring: %s"", obj->key);\n                    apr_pool_destroy(sobj->pool);\n                    sobj->pool = NULL;\n                    return status;\n                }\n            }\n            rv = conf->provider->socache_provider->store(\n                    conf->provider->socache_instance, r->server,\n                    (unsigned char *) obj->key, strlen(obj->key), sobj->expire,\n                    (unsigned char *) sobj->buffer, (unsigned int) slider,\n                    sobj->pool);\n            if (socache_mutex) {\n                apr_status_t status = apr_global_mutex_unlock(socache_mutex);\n                if (status != APR_SUCCESS) {\n                    ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(02372)\n                            ""could not release lock, ignoring: %s"", obj->key);\n                }\n            }\n            if (rv != APR_SUCCESS) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, rv, r, APLOGNO(02373)\n                        ""Vary not written to cache, ignoring: %s"", obj->key);\n                apr_pool_destroy(sobj->pool);\n                sobj->pool = NULL;\n                return rv;\n            }\n            obj->key = sobj->key = regen_key(r->pool, sobj->headers_in, varray,\n                    sobj->name);\n        }\n    }\n    socache_info->format = CACHE_SOCACHE_DISK_FORMAT_VERSION;\n    socache_info->date = obj->info.date;\n    socache_info->expire = obj->info.expire;\n    socache_info->entity_version = sobj->socache_info.entity_version++;\n    socache_info->request_time = obj->info.request_time;\n    socache_info->response_time = obj->info.response_time;\n    socache_info->status = obj->info.status;\n    if (r->header_only && r->status != HTTP_NOT_MODIFIED) {\n        socache_info->header_only = 1;\n    }\n    else {\n        socache_info->header_only = sobj->socache_info.header_only;\n    }\n    socache_info->name_len = strlen(sobj->name);\n    memcpy(&socache_info->control, &obj->info.control, sizeof(cache_control_t));\n    slider = sizeof(cache_socache_info_t);\n    if (slider + socache_info->name_len >= sobj->buffer_len) {\n        ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(02374)\n                ""cache buffer too small for name: %s"",\n                sobj->name);\n        apr_pool_destroy(sobj->pool);\n        sobj->pool = NULL;\n        return APR_EGENERAL;\n    }\n    memcpy(sobj->buffer + slider, sobj->name, socache_info->name_len);\n    slider += socache_info->name_len;\n    if (sobj->headers_out) {\n        if (APR_SUCCESS != store_table(sobj->headers_out, sobj->buffer,\n                sobj->buffer_len, &slider)) {\n            ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(02375)\n                    ""out-headers didn\'t fit in buffer: %s"", sobj->name);\n            apr_pool_destroy(sobj->pool);\n            sobj->pool = NULL;\n            return APR_EGENERAL;\n        }\n    }\n    if (sobj->headers_in) {\n        if (APR_SUCCESS != store_table(sobj->headers_in, sobj->buffer,\n                sobj->buffer_len, &slider)) {\n            ap_log_rerror(APLOG_MARK, APLOG_WARNING, rv, r, APLOGNO(02376)\n                    ""in-headers didn\'t fit in buffer %s"",\n                    sobj->key);\n            apr_pool_destroy(sobj->pool);\n            sobj->pool = NULL;\n            return APR_EGENERAL;\n        }\n    }\n    sobj->body_offset = slider;\n    return APR_SUCCESS;\n}']"
36720,0,https://github.com/openssl/openssl/blob/bd7775e14a19c326d3720f2345c2ae324409e979/crypto/lhash/lhash.c/#L139,"void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data)
{
    unsigned long hash;
    OPENSSL_LH_NODE *nn, **rn;
    void *ret;
    lh->error = 0;
    rn = getrn(lh, data, &hash);
    if (*rn == NULL) {
        lh->num_no_delete++;
        return NULL;
    } else {
        nn = *rn;
        *rn = nn->next;
        ret = nn->data;
        OPENSSL_free(nn);
        lh->num_delete++;
    }
    lh->num_items--;
    if ((lh->num_nodes > MIN_NODES) &&
        (lh->down_load >= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)))
        contract(lh);
    return ret;
}","['static int test_info_callback(int tst)\n{\n    SSL_CTX *cctx = NULL, *sctx = NULL;\n    SSL *clientssl = NULL, *serverssl = NULL;\n    SSL_SESSION *clntsess = NULL;\n    int testresult = 0;\n    int tlsvers;\n    if (tst < 2) {\n#ifndef OPENSSL_NO_TLS1_2\n        tlsvers = TLS1_2_VERSION;\n#else\n        return 1;\n#endif\n    } else {\n#ifndef OPENSSL_NO_TLS1_3\n        tlsvers = TLS1_3_VERSION;\n#else\n        return 1;\n#endif\n    }\n    info_cb_failed = 0;\n    info_cb_this_state = -1;\n    info_cb_offset = tst;\n    if (tst >= 4) {\n        SSL_SESSION *sess = NULL;\n        size_t written, readbytes;\n        unsigned char buf[80];\n        if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,\n                                            &serverssl, &sess, 0)))\n            goto end;\n        SSL_SESSION_free(sess);\n        SSL_set_info_callback((tst % 2) == 0 ? serverssl : clientssl,\n                              sslapi_info_callback);\n        if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),\n                                            &written))\n                || !TEST_size_t_eq(written, strlen(MSG1))\n                || !TEST_int_eq(SSL_read_early_data(serverssl, buf,\n                                                    sizeof(buf), &readbytes),\n                                SSL_READ_EARLY_DATA_SUCCESS)\n                || !TEST_mem_eq(MSG1, readbytes, buf, strlen(MSG1))\n                || !TEST_int_eq(SSL_get_early_data_status(serverssl),\n                                SSL_EARLY_DATA_ACCEPTED)\n                || !TEST_true(create_ssl_connection(serverssl, clientssl,\n                                                    SSL_ERROR_NONE))\n                || !TEST_false(info_cb_failed))\n            goto end;\n        testresult = 1;\n        goto end;\n    }\n    if (!TEST_true(create_ssl_ctx_pair(TLS_server_method(),\n                                       TLS_client_method(),\n                                       tlsvers, tlsvers, &sctx, &cctx, cert,\n                                       privkey)))\n        goto end;\n    SSL_CTX_set_info_callback((tst % 2) == 0 ? sctx : cctx,\n                              sslapi_info_callback);\n    if (!TEST_true(create_ssl_objects(sctx, cctx, &serverssl,\n                                          &clientssl, NULL, NULL))\n        || !TEST_true(create_ssl_connection(serverssl, clientssl,\n                                            SSL_ERROR_NONE))\n        || !TEST_false(info_cb_failed))\n    goto end;\n    clntsess = SSL_get1_session(clientssl);\n    SSL_shutdown(clientssl);\n    SSL_shutdown(serverssl);\n    SSL_free(serverssl);\n    SSL_free(clientssl);\n    serverssl = clientssl = NULL;\n    if (!TEST_true(create_ssl_objects(sctx, cctx, &serverssl, &clientssl, NULL,\n                                      NULL))\n            || !TEST_true(SSL_set_session(clientssl, clntsess))\n            || !TEST_true(create_ssl_connection(serverssl, clientssl,\n                                                SSL_ERROR_NONE))\n            || !TEST_true(SSL_session_reused(clientssl))\n            || !TEST_false(info_cb_failed))\n        goto end;\n    testresult = 1;\n end:\n    SSL_free(serverssl);\n    SSL_free(clientssl);\n    SSL_SESSION_free(clntsess);\n    SSL_CTX_free(sctx);\n    SSL_CTX_free(cctx);\n    return testresult;\n}', 'int create_ssl_objects(SSL_CTX *serverctx, SSL_CTX *clientctx, SSL **sssl,\n                          SSL **cssl, BIO *s_to_c_fbio, BIO *c_to_s_fbio)\n{\n    SSL *serverssl = NULL, *clientssl = NULL;\n    BIO *s_to_c_bio = NULL, *c_to_s_bio = NULL;\n    if (*sssl != NULL)\n        serverssl = *sssl;\n    else if (!TEST_ptr(serverssl = SSL_new(serverctx)))\n        goto error;\n    if (*cssl != NULL)\n        clientssl = *cssl;\n    else if (!TEST_ptr(clientssl = SSL_new(clientctx)))\n        goto error;\n    if (SSL_is_dtls(clientssl)) {\n        if (!TEST_ptr(s_to_c_bio = BIO_new(bio_s_mempacket_test()))\n                || !TEST_ptr(c_to_s_bio = BIO_new(bio_s_mempacket_test())))\n            goto error;\n    } else {\n        if (!TEST_ptr(s_to_c_bio = BIO_new(BIO_s_mem()))\n                || !TEST_ptr(c_to_s_bio = BIO_new(BIO_s_mem())))\n            goto error;\n    }\n    if (s_to_c_fbio != NULL\n            && !TEST_ptr(s_to_c_bio = BIO_push(s_to_c_fbio, s_to_c_bio)))\n        goto error;\n    if (c_to_s_fbio != NULL\n            && !TEST_ptr(c_to_s_bio = BIO_push(c_to_s_fbio, c_to_s_bio)))\n        goto error;\n    BIO_set_mem_eof_return(s_to_c_bio, -1);\n    BIO_set_mem_eof_return(c_to_s_bio, -1);\n    SSL_set_bio(serverssl, c_to_s_bio, s_to_c_bio);\n    BIO_up_ref(s_to_c_bio);\n    BIO_up_ref(c_to_s_bio);\n    SSL_set_bio(clientssl, s_to_c_bio, c_to_s_bio);\n    *sssl = serverssl;\n    *cssl = clientssl;\n    return 1;\n error:\n    SSL_free(serverssl);\n    SSL_free(clientssl);\n    BIO_free(s_to_c_bio);\n    BIO_free(c_to_s_bio);\n    BIO_free(s_to_c_fbio);\n    BIO_free(c_to_s_fbio);\n    return 0;\n}', 'SSL *SSL_new(SSL_CTX *ctx)\n{\n    SSL *s;\n    if (ctx == NULL) {\n        SSLerr(SSL_F_SSL_NEW, SSL_R_NULL_SSL_CTX);\n        return NULL;\n    }\n    if (ctx->method == NULL) {\n        SSLerr(SSL_F_SSL_NEW, SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION);\n        return NULL;\n    }\n    s = OPENSSL_zalloc(sizeof(*s));\n    if (s == NULL)\n        goto err;\n    s->references = 1;\n    s->lock = CRYPTO_THREAD_lock_new();\n    if (s->lock == NULL) {\n        OPENSSL_free(s);\n        s = NULL;\n        goto err;\n    }\n    RECORD_LAYER_init(&s->rlayer, s);\n    s->options = ctx->options;\n    s->dane.flags = ctx->dane.flags;\n    s->min_proto_version = ctx->min_proto_version;\n    s->max_proto_version = ctx->max_proto_version;\n    s->mode = ctx->mode;\n    s->max_cert_list = ctx->max_cert_list;\n    s->max_early_data = ctx->max_early_data;\n    s->tls13_ciphersuites = sk_SSL_CIPHER_dup(ctx->tls13_ciphersuites);\n    if (s->tls13_ciphersuites == NULL)\n        goto err;\n    s->cert = ssl_cert_dup(ctx->cert);\n    if (s->cert == NULL)\n        goto err;\n    RECORD_LAYER_set_read_ahead(&s->rlayer, ctx->read_ahead);\n    s->msg_callback = ctx->msg_callback;\n    s->msg_callback_arg = ctx->msg_callback_arg;\n    s->verify_mode = ctx->verify_mode;\n    s->not_resumable_session_cb = ctx->not_resumable_session_cb;\n    s->record_padding_cb = ctx->record_padding_cb;\n    s->record_padding_arg = ctx->record_padding_arg;\n    s->block_padding = ctx->block_padding;\n    s->sid_ctx_length = ctx->sid_ctx_length;\n    if (!ossl_assert(s->sid_ctx_length <= sizeof(s->sid_ctx)))\n        goto err;\n    memcpy(&s->sid_ctx, &ctx->sid_ctx, sizeof(s->sid_ctx));\n    s->verify_callback = ctx->default_verify_callback;\n    s->generate_session_id = ctx->generate_session_id;\n    s->param = X509_VERIFY_PARAM_new();\n    if (s->param == NULL)\n        goto err;\n    X509_VERIFY_PARAM_inherit(s->param, ctx->param);\n    s->quiet_shutdown = ctx->quiet_shutdown;\n    s->ext.max_fragment_len_mode = ctx->ext.max_fragment_len_mode;\n    s->max_send_fragment = ctx->max_send_fragment;\n    s->split_send_fragment = ctx->split_send_fragment;\n    s->max_pipelines = ctx->max_pipelines;\n    if (s->max_pipelines > 1)\n        RECORD_LAYER_set_read_ahead(&s->rlayer, 1);\n    if (ctx->default_read_buf_len > 0)\n        SSL_set_default_read_buffer_len(s, ctx->default_read_buf_len);\n    SSL_CTX_up_ref(ctx);\n    s->ctx = ctx;\n    s->ext.debug_cb = 0;\n    s->ext.debug_arg = NULL;\n    s->ext.ticket_expected = 0;\n    s->ext.status_type = ctx->ext.status_type;\n    s->ext.status_expected = 0;\n    s->ext.ocsp.ids = NULL;\n    s->ext.ocsp.exts = NULL;\n    s->ext.ocsp.resp = NULL;\n    s->ext.ocsp.resp_len = 0;\n    SSL_CTX_up_ref(ctx);\n    s->session_ctx = ctx;\n#ifndef OPENSSL_NO_EC\n    if (ctx->ext.ecpointformats) {\n        s->ext.ecpointformats =\n            OPENSSL_memdup(ctx->ext.ecpointformats,\n                           ctx->ext.ecpointformats_len);\n        if (!s->ext.ecpointformats)\n            goto err;\n        s->ext.ecpointformats_len =\n            ctx->ext.ecpointformats_len;\n    }\n    if (ctx->ext.supportedgroups) {\n        s->ext.supportedgroups =\n            OPENSSL_memdup(ctx->ext.supportedgroups,\n                           ctx->ext.supportedgroups_len\n                                * sizeof(*ctx->ext.supportedgroups));\n        if (!s->ext.supportedgroups)\n            goto err;\n        s->ext.supportedgroups_len = ctx->ext.supportedgroups_len;\n    }\n#endif\n#ifndef OPENSSL_NO_NEXTPROTONEG\n    s->ext.npn = NULL;\n#endif\n    if (s->ctx->ext.alpn) {\n        s->ext.alpn = OPENSSL_malloc(s->ctx->ext.alpn_len);\n        if (s->ext.alpn == NULL)\n            goto err;\n        memcpy(s->ext.alpn, s->ctx->ext.alpn, s->ctx->ext.alpn_len);\n        s->ext.alpn_len = s->ctx->ext.alpn_len;\n    }\n    s->verified_chain = NULL;\n    s->verify_result = X509_V_OK;\n    s->default_passwd_callback = ctx->default_passwd_callback;\n    s->default_passwd_callback_userdata = ctx->default_passwd_callback_userdata;\n    s->method = ctx->method;\n    s->key_update = SSL_KEY_UPDATE_NONE;\n    if (!s->method->ssl_new(s))\n        goto err;\n    s->server = (ctx->method->ssl_accept == ssl_undefined_function) ? 0 : 1;\n    if (!SSL_clear(s))\n        goto err;\n    if (!CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data))\n        goto err;\n#ifndef OPENSSL_NO_PSK\n    s->psk_client_callback = ctx->psk_client_callback;\n    s->psk_server_callback = ctx->psk_server_callback;\n#endif\n    s->psk_find_session_cb = ctx->psk_find_session_cb;\n    s->psk_use_session_cb = ctx->psk_use_session_cb;\n    s->job = NULL;\n#ifndef OPENSSL_NO_CT\n    if (!SSL_set_ct_validation_callback(s, ctx->ct_validation_callback,\n                                        ctx->ct_validation_callback_arg))\n        goto err;\n#endif\n    return s;\n err:\n    SSL_free(s);\n    SSLerr(SSL_F_SSL_NEW, ERR_R_MALLOC_FAILURE);\n    return NULL;\n}', 'void SSL_free(SSL *s)\n{\n    int i;\n    if (s == NULL)\n        return;\n    CRYPTO_DOWN_REF(&s->references, &i, s->lock);\n    REF_PRINT_COUNT(""SSL"", s);\n    if (i > 0)\n        return;\n    REF_ASSERT_ISNT(i < 0);\n    X509_VERIFY_PARAM_free(s->param);\n    dane_final(&s->dane);\n    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data);\n    ssl_free_wbio_buffer(s);\n    BIO_free_all(s->wbio);\n    BIO_free_all(s->rbio);\n    BUF_MEM_free(s->init_buf);\n    sk_SSL_CIPHER_free(s->cipher_list);\n    sk_SSL_CIPHER_free(s->cipher_list_by_id);\n    sk_SSL_CIPHER_free(s->tls13_ciphersuites);\n    if (s->session != NULL) {\n        ssl_clear_bad_session(s);\n        SSL_SESSION_free(s->session);\n    }\n    SSL_SESSION_free(s->psksession);\n    OPENSSL_free(s->psksession_id);\n    clear_ciphers(s);\n    ssl_cert_free(s->cert);\n    OPENSSL_free(s->ext.hostname);\n    SSL_CTX_free(s->session_ctx);\n#ifndef OPENSSL_NO_EC\n    OPENSSL_free(s->ext.ecpointformats);\n    OPENSSL_free(s->ext.supportedgroups);\n#endif\n    sk_X509_EXTENSION_pop_free(s->ext.ocsp.exts, X509_EXTENSION_free);\n#ifndef OPENSSL_NO_OCSP\n    sk_OCSP_RESPID_pop_free(s->ext.ocsp.ids, OCSP_RESPID_free);\n#endif\n#ifndef OPENSSL_NO_CT\n    SCT_LIST_free(s->scts);\n    OPENSSL_free(s->ext.scts);\n#endif\n    OPENSSL_free(s->ext.ocsp.resp);\n    OPENSSL_free(s->ext.alpn);\n    OPENSSL_free(s->ext.tls13_cookie);\n    OPENSSL_free(s->clienthello);\n    OPENSSL_free(s->pha_context);\n    EVP_MD_CTX_free(s->pha_dgst);\n    sk_X509_NAME_pop_free(s->ca_names, X509_NAME_free);\n    sk_X509_pop_free(s->verified_chain, X509_free);\n    if (s->method != NULL)\n        s->method->ssl_free(s);\n    RECORD_LAYER_release(&s->rlayer);\n    SSL_CTX_free(s->ctx);\n    ASYNC_WAIT_CTX_free(s->waitctx);\n#if !defined(OPENSSL_NO_NEXTPROTONEG)\n    OPENSSL_free(s->ext.npn);\n#endif\n#ifndef OPENSSL_NO_SRTP\n    sk_SRTP_PROTECTION_PROFILE_free(s->srtp_profiles);\n#endif\n    CRYPTO_THREAD_lock_free(s->lock);\n    OPENSSL_free(s);\n}', 'int ssl_clear_bad_session(SSL *s)\n{\n    if ((s->session != NULL) &&\n        !(s->shutdown & SSL_SENT_SHUTDOWN) &&\n        !(SSL_in_init(s) || SSL_in_before(s))) {\n        SSL_CTX_remove_session(s->session_ctx, s->session);\n        return 1;\n    } else\n        return 0;\n}', 'int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *c)\n{\n    return remove_session_lock(ctx, c, 1);\n}', 'static int remove_session_lock(SSL_CTX *ctx, SSL_SESSION *c, int lck)\n{\n    SSL_SESSION *r;\n    int ret = 0;\n    if ((c != NULL) && (c->session_id_length != 0)) {\n        if (lck)\n            CRYPTO_THREAD_write_lock(ctx->lock);\n        if ((r = lh_SSL_SESSION_retrieve(ctx->sessions, c)) != NULL) {\n            ret = 1;\n            r = lh_SSL_SESSION_delete(ctx->sessions, r);\n            SSL_SESSION_list_remove(ctx, r);\n        }\n        c->not_resumable = 1;\n        if (lck)\n            CRYPTO_THREAD_unlock(ctx->lock);\n        if (ret)\n            SSL_SESSION_free(r);\n        if (ctx->remove_session_cb != NULL)\n            ctx->remove_session_cb(ctx, c);\n    } else\n        ret = 0;\n    return ret;\n}', 'DEFINE_LHASH_OF(SSL_SESSION)', 'void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data)\n{\n    unsigned long hash;\n    OPENSSL_LH_NODE *nn, **rn;\n    void *ret;\n    lh->error = 0;\n    rn = getrn(lh, data, &hash);\n    if (*rn == NULL) {\n        lh->num_no_delete++;\n        return NULL;\n    } else {\n        nn = *rn;\n        *rn = nn->next;\n        ret = nn->data;\n        OPENSSL_free(nn);\n        lh->num_delete++;\n    }\n    lh->num_items--;\n    if ((lh->num_nodes > MIN_NODES) &&\n        (lh->down_load >= (lh->num_items * LH_LOAD_MULT / lh->num_nodes)))\n        contract(lh);\n    return ret;\n}']"
36721,0,https://github.com/libav/libav/blob/41f1d3afebd64b02e9cabd5f0ae0c62a8647b9f4/ffmpeg.c/#L2785,"static int opt_metadata(const char *opt, const char *arg)
{
    char *mid= strchr(arg, '=');
    if(!mid){
        fprintf(stderr, ""Missing =\n"");
        ffmpeg_exit(1);
    }
    *mid++= 0;
    av_metadata_set2(&metadata, arg, mid, 0);
    return 0;
}","['static int opt_metadata(const char *opt, const char *arg)\n{\n    char *mid= strchr(arg, \'=\');\n    if(!mid){\n        fprintf(stderr, ""Missing =\\n"");\n        ffmpeg_exit(1);\n    }\n    *mid++= 0;\n    av_metadata_set2(&metadata, arg, mid, 0);\n    return 0;\n}']"
